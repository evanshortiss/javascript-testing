var crypto = require('crypto');
var url = require('url');
var util = require('util');

//
// Generic clone function, copied from:
//   http://stackoverflow.com/questions/728360/copying-an-object-in-javascript
//
function clone(obj) {
    // Handle the 3 simple types, and null or undefined
    if (null == obj || "object" != typeof obj) return obj;

    // Handle Date
    if (obj instanceof Date) {
        var copy = new Date();
        copy.setTime(obj.getTime());
        return copy;
    }

    // Handle Array
    if (obj instanceof Array) {
        var copy = [];
        for (var i = 0; i <obj.length;  ++i) {
            copy[i] = clone(obj[i]);
        }
        return copy;
    }

    // Handle Object
    if (obj instanceof Object) {
        var copy = {};
        for (var attr in obj) {
            if (obj.hasOwnProperty(attr)) copy[attr] = clone(obj[attr]);
        }
        return copy;
    }

    throw new Error("Unable to copy obj! Its type isn't supported.");
}

// Get UrbanAirship property
function getUAProp(cfg, prop) {
  var ret = undefined;
  if (cfg && cfg.urbanairship && cfg.urbanairship[prop])
    ret = cfg.urbanairship[prop];
  return ret;
};

//
// Converts existing existing $fh.web() options (as documented here: http://docs.feedhenry.com/wiki/Web_Requests) to node.js http.request options (as documented here: http://nodejs.org/docs/v0.4.7/api/all.html#http.request)
//
function convertFHOptionsToNodeOptions(fhOptions) {
  var nodeOptions = new Object();
  if (fhOptions.url) {
    var u = url.parse(fhOptions.url);
    nodeOptions.host = u.hostname;
    nodeOptions.port = u.port;
    if (u.search) 
      nodeOptions.path = u.pathname + u.search;
    else 
      nodeOptions.path = u.pathname;

    nodeOptions.isSecure = u.protocol === 'https:';
  }

  if(fhOptions.method) {
    nodeOptions.method = fhOptions.method;
  }else {
    nodeOptions.method = "GET";
  }

  if(fhOptions.contentType) {
    nodeOptions.headers = new Object();
    nodeOptions.headers['content-type'] = fhOptions.contentType;
  }

  // Convert FH Headers array into Node headers
  if(fhOptions.headers) {
    if(nodeOptions.headers == undefined) {
      nodeOptions.headers = new Object();
    }
    for (var i=0; i<fhOptions.headers.length; i++) {
      nodeOptions.headers[fhOptions.headers[i].name] = fhOptions.headers[i].value;
    }
  }

  // Convert FH cookie array into node header cookie
  if(fhOptions.cookies) {
    if(nodeOptions.headers == undefined) {
      nodeOptions.headers = new Object();
    }
    var cookies = "";
    for (var i=0; i<fhOptions.cookies.length; i++) {
      cookies += fhOptions.cookies[i].name + '=' + fhOptions.cookies[i].value + ';';
    }

    nodeOptions.headers['Cookie'] = cookies;
  }

  return nodeOptions;
};

function webCacheKey(fhOptions) {
  var hashText = JSON.stringify(fhOptions);
  return crypto.createHash('md5').update(hashText).digest('hex');
}

function getUAAppKeys(act, type, config) {
  var keys = { appKey : "",  appSecret : ""};
  if (getUAProp(config, 'ua_push_enabled')){
    if (type == "dev"){
      keys.appKey = getUAProp(config, 'ua_push_dev_app_key');
      keys.appSecret = act === "register" ? getUAProp(config, 'ua_push_dev_app_secret') : getUAProp(config, 'ua_push_dev_master_secret');
    } else if("prod" === type){
      keys.appKey = getUAProp(config, 'ua_push_prod_app_key');
      keys.appSecret = act== "register" ? getUAProp(config, 'ua_push_prod_app_secret') : getUAProp(config, 'ua_push_prod_master_secret');
    }
  }
  return keys;
};

exports.clone = clone;
exports.getUAProp = getUAProp;
exports.convertFHOptionsToNodeOptions = convertFHOptionsToNodeOptions;
exports.webCacheKey = webCacheKey;
exports.getUAAppKeys = getUAAppKeys;