{
  "name": "fh-amqp-js",
  "version": "0.2.1",
  "description": "FeedHenry AMQP Client",
  "main": "./lib/amqpjs.js",
  "bin": {
    "fh-amqp-js": "./fh-amqp-js.js"
  },
  "directories": {
    "lib": "./lib"
  },
  "dependencies": {
    "async": "0.2.7",
    "amqp": "0.1.6",
    "rc": "0.1.1"
  },
  "devDependencies": {
    "whiskey": "0.6.13",
    "proxyquire": "0.4.0"
  },
  "private": false,
  "scripts": {
    "test": "make test"
  },
  "readme": "fh-amqp-js\n==========\n\nFeedHenry AMQP client wrapper for communication with a Rabbit cluster. \n\nOverview\n--------\n\nThe FeedHenry Platform includes a RabbitMQ cluster, which is set up to have highly available [Mirrored Queues](http://www.rabbitmq.com/ha.html). The messaging pattern that best suits our development requirements is the 'Topic' pattern, described in the RabbitMQ [documentation](http://www.rabbitmq.com/tutorials/tutorial-five-python.html). \n\nThis client library helps with the following:\n\n* Automatic detection of Rabbit node failure and reconnecting to another node in the Rabbit Cluster.\n\n* 'publishTopic' and 'subscribeToTopic' type functions that set up correct Exchange and Q configuration behind the scenes.\n\nYou probably won't, but if you think you need to use a different Q type or Message Q Pattern, you will need to either extend this library, or use the [AMQP driver](https://github.com/postwait/node-amqp) directly.\n\nThis module can also be used from the command line, to quick publish a message to the FeedHenry Rabbit Cluster, or also as a handy way to quickly subscribe to FeedHenry messages.\n\nModule Usage\n------------\n\nSample [sub.js](https://github.com/fheng/fh-amqp-js/blob/master/examples/sub.js):\n\n```javascript\nvar fhamqpjs = require('fh-amqp-js');\nvar cfg = {\n  clusterNodes: [\"amqp://guest:guest@dummy.feedhenry.me:5672/fh-events\", \"amqp://guest:guest@dummy.feedhenry.me:5673/fh-events\"],\n  maxReconnectAttempts: 10  // specifies how may connection failures to attempt before giving up.\n};\n \nvar amqpManager = new fhamqpjs.AMQPManager(cfg);\namqpManager.connectToCluster();\n \n// Note that the 'connection' event will fire every time a connection is made to a different Rabbit Node in the cluster (i.e. if the first node we're connected to fails, this connection event will fire when we get connected to the next node in the cluster. Somewhat suboptimal but can't do much about it currently.\namqpManager.on(\"connection\", function(){\n  amqpManager.subscribeToTopic(\"fh-event-exchange\", \"my-event-q\", \"my-topic-filter.#\", subscribeFunc, function(err){\n    if(err) console.error(\"Fatal error setting up subscriber: \", err); \n...\n  });\n});\n \n// error handler: something fatal (like can't connect to any nodes in a cluster) needs to happen for this to fire.\namqpManager.on(\"error\", function(err){\n  console.error(\"Fatal error: \", err);\n});\n \n// the function that gets called each time a message is recieved\nfunction subscribeFunc (json, headers, deliveryInfo) {\n  console.log(\"GOT MESSAGE: \", json);\n};\n```\n\nSample [pub.js](https://github.com/fheng/fh-amqp-js/blob/master/examples/pub.js):\n\n```javascript\nvar fhamqpjs = require('fh-amqp-js');\nvar cfg = {\n  clusterNodes: [\"amqp://guest:guest@dummy.feedhenry.me:5672/fh-events\", \"amqp://guest:guest@dummy.feedhenry.me:5673/fh-events\"],\n  maxReconnectAttempts: 10\n};\n \nvar amqpManager = new fhamqpjs.AMQPManager(cfg);\namqpManager.connectToCluster();\n \n// note we clear the timer on each (re)connection\nvar t; var count=0;\namqpManager.on(\"connection\", function(){\n  if (t) clearInterval(t);\n  t = setInterval(function(){\n    amqpManager.publishTopic(\"fh-event-exchange\", \"topic\", {count: count++}, function(err){\n      if (err) console.error(\"Fatal publishing error: \", err);\n    });\n  }, 1000);\n});\n \namqpManager.on(\"error\", function(err){\n  console.error(\"Fatal error: \", err);\n});\n\n```\n\nNote that the vhosts, Exchange names and Topics used internally in FeedHenry are documented here: TODO.\n\nCLI Usage\n---------\n\n    Usage: fh-amqp-js pub <exchange> <topic> <message> --clusterNodes=[<amqp-url>,*]\n    fh-amqp-js sub <exchange> <topic> --clusterNodes=[<amqp-url>,*]\n\n\nThe Command Line Interface can be used to quickly publish messages, e.g.\n\n    $ fh-amqp-js pub \"fh-topic2\" \"fh.event.count\" '{\"count\": 1}' --clusterNodes='[\"amqp://guest:guest@dummy.feedhenry.me:5672\"]'\n\nThere is also a 'sub' command, for quickly subscribing to messages:\n\n    $ fh-amqp-js sub \"fh-topic2\" \"fh.event.count\" --clusterNodes='[\"amqp://guest:guest@dummy.feedhenry.me:5672\"]'\n\nConfiguration:\n\nThe CLI uses the [RC](https://github.com/dominictarr/rc) node module for incredibly flexible config finding (see its documentation). Config options currently are:\n\n```javascript\n{\n  clusterNodes: [\"amqp://guest:guest@dummy.feedhenry.me:5672/fh-events\", \"amqp://guest:guest@dummy.feedhenry.me:5673/fh-events\"],\n  maxReconnectAttempts: 10  // specifies how may connection failures to attempt before giving up.\n}\n```\n\nDevelopment\n-----------\n\nTo run the tests:\n\n    make test\n\nor:\n\n    make test-coverage-cli\n\nor: \n\n    make test-coverage-html\n\nBuild artifacts are located on Denzil here: http://denzil.henora.net:8080/view/common/job/fh-amqp-js/",
  "readmeFilename": "README.md",
  "_id": "fh-amqp-js@0.2.1",
  "_from": "fh-amqp-js@*"
}
